# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
#
# When uploading crates to the registry Cargo will automatically
# "normalize" Cargo.toml files for maximal compatibility
# with all versions of Cargo and also rewrite `path` dependencies
# to registry (e.g., crates.io) dependencies.
#
# If you are reading this file be aware that the original Cargo.toml
# will likely look very different (and much more reasonable).
# See Cargo.toml.orig for the original contents.

[package]
edition = "2021"
name = "polars-lazy"
version = "0.35.4"
authors = ["Ritchie Vink <ritchie46@gmail.com>"]
description = "Lazy query engine for the Polars DataFrame library"
homepage = "https://www.pola.rs/"
readme = "README.md"
license = "MIT"
repository = "https://github.com/pola-rs/polars"

[package.metadata.docs.rs]
features = [
    "serde",
    "cloud",
    "temporal",
    "streaming",
    "cross_join",
    "chunked_ids",
    "dtype-duration",
    "dynamic_group_by",
    "asof_join",
    "nightly",
    "dtype-array",
    "dtype-date",
    "dtype-datetime",
    "json",
    "csv",
    "async",
    "ipc",
    "parquet",
    "round_series",
    "is_in",
    "dtype-i8",
    "list_drop_nulls",
    "fused",
    "list_any_all",
    "dtype-categorical",
    "pivot",
    "dtype-decimal",
    "list_count",
    "moment",
    "list_sample",
    "cutqcut",
    "fmt",
    "dtype-u16",
    "list_sets",
    "dtype-u8",
    "dtype-i16",
    "rle",
    "rolling_window",
    "dtype-time",
    "list_gather",
    "diff",
    "cov",
    "search_sorted",
    "date_offset",
    "polars-time",
    "tokio",
    "trigonometry",
    "is_last_distinct",
    "extract_groups",
    "polars-pipe",
    "peaks",
    "random",
    "top_k",
    "approx_unique",
    "concat_str",
    "string_to_integer",
    "cse",
    "dot_diagram",
    "panic_on_schema",
    "regex",
    "arg_where",
    "futures",
    "is_first_distinct",
    "string_pad",
    "rank",
    "is_unique",
    "dtype-struct",
    "timezones",
    "object",
    "pct_change",
    "unique_counts",
    "cum_agg",
    "propagate_nans",
    "abs",
    "sign",
    "string_encoding",
    "bigidx",
    "row_hash",
    "semi_anti_join",
    "list_to_struct",
    "range",
    "ewma",
    "log",
    "repeat_by",
    "cloud_write",
    "polars-json",
    "meta",
    "coalesce",
    "interpolate",
    "true_div",
    "strings",
    "mode",
    "binary_encoding",
    "merge_sorted",
    "cumulative_eval",
    "list_eval",
    "diagonal_concat",
]
rustdoc-args = [
    "--cfg",
    "docsrs",
]

[dependencies.ahash]
version = ">=0.8.5"

[dependencies.arrow]
version = "0.35.4"
features = [
    "compute_aggregate",
    "compute_arithmetics",
    "compute_boolean",
    "compute_boolean_kleene",
    "compute_cast",
    "compute_comparison",
    "compute_concatenate",
    "compute_filter",
    "compute_if_then_else",
]
default-features = false
package = "polars-arrow"

[dependencies.bitflags]
version = "2"

[dependencies.futures]
version = "0.3.25"
optional = true

[dependencies.glob]
version = "0.3"

[dependencies.once_cell]
version = "1"

[dependencies.polars-core]
version = "0.35.4"
features = [
    "lazy",
    "zip_with",
    "random",
]
default-features = false

[dependencies.polars-io]
version = "0.35.4"
features = ["lazy"]
default-features = false

[dependencies.polars-json]
version = "0.35.4"
optional = true
default-features = false

[dependencies.polars-ops]
version = "0.35.4"
default-features = false

[dependencies.polars-pipe]
version = "0.35.4"
optional = true
default-features = false

[dependencies.polars-plan]
version = "0.35.4"
default-features = false

[dependencies.polars-time]
version = "0.35.4"
optional = true
default-features = false

[dependencies.polars-utils]
version = "0.35.4"
default-features = false

[dependencies.pyo3]
version = "0.20"
optional = true

[dependencies.rayon]
version = "1.8"

[dependencies.smartstring]
version = "1"

[dependencies.tokio]
version = "1.26"
optional = true

[dev-dependencies.serde_json]
version = "1"

[build-dependencies.version_check]
version = "0.9.4"

[features]
abs = ["polars-plan/abs"]
approx_unique = ["polars-plan/approx_unique"]
arg_where = ["polars-plan/arg_where"]
asof_join = [
    "polars-plan/asof_join",
    "polars-time",
    "polars-ops/asof_join",
]
async = [
    "polars-plan/async",
    "polars-io/cloud",
    "polars-pipe?/async",
]
bigidx = ["polars-plan/bigidx"]
binary_encoding = ["polars-plan/binary_encoding"]
chunked_ids = [
    "polars-plan/chunked_ids",
    "polars-core/chunked_ids",
    "polars-ops/chunked_ids",
]
cloud = [
    "async",
    "polars-pipe?/cloud",
    "polars-plan/cloud",
    "tokio",
    "futures",
]
cloud_write = ["cloud"]
coalesce = ["polars-plan/coalesce"]
concat_str = ["polars-plan/concat_str"]
cov = [
    "polars-ops/cov",
    "polars-plan/cov",
]
cross_join = [
    "polars-plan/cross_join",
    "polars-pipe?/cross_join",
    "polars-ops/cross_join",
]
cse = ["polars-plan/cse"]
csv = [
    "polars-io/csv",
    "polars-plan/csv",
    "polars-pipe?/csv",
]
cum_agg = ["polars-plan/cum_agg"]
cumulative_eval = []
cutqcut = [
    "polars-plan/cutqcut",
    "polars-ops/cutqcut",
]
date_offset = ["polars-plan/date_offset"]
diagonal_concat = []
diff = [
    "polars-plan/diff",
    "polars-plan/diff",
]
dot_diagram = ["polars-plan/dot_diagram"]
dtype-array = [
    "polars-plan/dtype-array",
    "polars-pipe?/dtype-array",
    "polars-ops/dtype-array",
]
dtype-categorical = [
    "polars-plan/dtype-categorical",
    "polars-pipe?/dtype-categorical",
]
dtype-date = [
    "polars-plan/dtype-date",
    "polars-time/dtype-date",
    "temporal",
]
dtype-datetime = [
    "polars-plan/dtype-datetime",
    "polars-time/dtype-datetime",
    "temporal",
]
dtype-decimal = [
    "polars-plan/dtype-decimal",
    "polars-pipe?/dtype-decimal",
]
dtype-duration = [
    "polars-plan/dtype-duration",
    "polars-time/dtype-duration",
    "temporal",
]
dtype-i16 = [
    "polars-plan/dtype-i16",
    "polars-pipe?/dtype-i16",
]
dtype-i8 = [
    "polars-plan/dtype-i8",
    "polars-pipe?/dtype-i8",
]
dtype-struct = ["polars-plan/dtype-struct"]
dtype-time = [
    "polars-core/dtype-time",
    "temporal",
]
dtype-u16 = [
    "polars-plan/dtype-u16",
    "polars-pipe?/dtype-u16",
]
dtype-u8 = [
    "polars-plan/dtype-u8",
    "polars-pipe?/dtype-u8",
]
dynamic_group_by = [
    "polars-plan/dynamic_group_by",
    "polars-time",
    "temporal",
]
ewma = ["polars-plan/ewma"]
extract_groups = ["polars-plan/extract_groups"]
extract_jsonpath = [
    "polars-plan/extract_jsonpath",
    "polars-ops/extract_jsonpath",
]
fmt = [
    "polars-core/fmt",
    "polars-plan/fmt",
]
fused = [
    "polars-plan/fused",
    "polars-ops/fused",
]
future = []
interpolate = ["polars-plan/interpolate"]
ipc = [
    "polars-io/ipc",
    "polars-plan/ipc",
    "polars-pipe?/ipc",
]
is_first_distinct = ["polars-plan/is_first_distinct"]
is_in = [
    "polars-plan/is_in",
    "polars-ops/is_in",
]
is_last_distinct = ["polars-plan/is_last_distinct"]
is_unique = ["polars-plan/is_unique"]
json = [
    "polars-io/json",
    "polars-plan/json",
    "polars-json",
]
list_any_all = [
    "polars-ops/list_any_all",
    "polars-plan/list_any_all",
]
list_count = [
    "polars-ops/list_count",
    "polars-plan/list_count",
]
list_drop_nulls = [
    "polars-ops/list_drop_nulls",
    "polars-plan/list_drop_nulls",
]
list_eval = []
list_gather = [
    "polars-ops/list_gather",
    "polars-plan/list_gather",
]
list_sample = [
    "polars-ops/list_sample",
    "polars-plan/list_sample",
]
list_sets = [
    "polars-plan/list_sets",
    "polars-ops/list_sets",
]
list_to_struct = ["polars-plan/list_to_struct"]
log = ["polars-plan/log"]
merge_sorted = ["polars-plan/merge_sorted"]
meta = ["polars-plan/meta"]
mode = ["polars-plan/mode"]
moment = [
    "polars-plan/moment",
    "polars-ops/moment",
]
nightly = [
    "polars-core/nightly",
    "polars-pipe?/nightly",
    "polars-plan/nightly",
]
object = ["polars-plan/object"]
panic_on_schema = ["polars-plan/panic_on_schema"]
parquet = [
    "polars-io/parquet",
    "polars-plan/parquet",
    "polars-pipe?/parquet",
]
pct_change = ["polars-plan/pct_change"]
peaks = ["polars-plan/peaks"]
pivot = [
    "polars-core/rows",
    "polars-ops/pivot",
]
propagate_nans = ["polars-plan/propagate_nans"]
python = [
    "pyo3",
    "polars-plan/python",
    "polars-core/python",
    "polars-io/python",
]
random = ["polars-plan/random"]
range = ["polars-plan/range"]
rank = ["polars-plan/rank"]
regex = ["polars-plan/regex"]
repeat_by = ["polars-plan/repeat_by"]
rle = [
    "polars-plan/rle",
    "polars-ops/rle",
]
rolling_window = [
    "polars-plan/rolling_window",
    "polars-time/rolling_window",
]
round_series = [
    "polars-plan/round_series",
    "polars-ops/round_series",
]
row_hash = ["polars-plan/row_hash"]
search_sorted = ["polars-plan/search_sorted"]
semi_anti_join = ["polars-plan/semi_anti_join"]
serde = [
    "polars-plan/serde",
    "arrow/serde",
    "polars-core/serde-lazy",
    "polars-time?/serde",
    "polars-io/serde",
    "polars-ops/serde",
]
sign = ["polars-plan/sign"]
streaming = [
    "chunked_ids",
    "polars-pipe",
    "polars-plan/streaming",
    "polars-ops/chunked_ids",
]
string_encoding = ["polars-plan/string_encoding"]
string_pad = ["polars-plan/string_pad"]
string_to_integer = ["polars-plan/string_to_integer"]
strings = ["polars-plan/strings"]
temporal = [
    "dtype-datetime",
    "dtype-date",
    "dtype-time",
    "dtype-duration",
    "polars-plan/temporal",
]
test = [
    "polars-plan/debugging",
    "panic_on_schema",
    "rolling_window",
    "rank",
    "round_series",
    "csv",
    "dtype-categorical",
    "cum_agg",
    "regex",
    "polars-core/fmt",
    "diff",
    "abs",
    "parquet",
    "ipc",
    "dtype-date",
]
test_all = [
    "test",
    "strings",
    "regex",
    "ipc",
    "row_hash",
    "string_pad",
    "string_to_integer",
    "search_sorted",
    "top_k",
    "pivot",
    "semi_anti_join",
    "cse",
]
timezones = ["polars-plan/timezones"]
top_k = ["polars-plan/top_k"]
trigonometry = ["polars-plan/trigonometry"]
true_div = ["polars-plan/true_div"]
unique_counts = ["polars-plan/unique_counts"]
